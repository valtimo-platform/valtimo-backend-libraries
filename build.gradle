plugins {
    id "idea"

    id "org.springframework.boot" version "${springVersion}"
    id "io.spring.dependency-management" version "${springDependencyManagementVersion}"

    id "org.jetbrains.kotlin.jvm" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.spring" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.jpa" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.allopen" version "${kotlinVersion}"
    id "org.jetbrains.dokka" version "${kotlinVersion}"
    id "com.github.ben-manes.versions" version "0.20.0"
    id "io.freefair.lombok" version "6.3.0"
    id "org.sonarqube" version "2.7"
    id "checkstyle"
    id "jacoco"
    id "com.avast.gradle.docker-compose" version "0.14.9"
}

/*
 * Copyright 2015-2020 Ritense BV, the Netherlands.
 *
 * Licensed under EUPL, Version 1.2 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://joinup.ec.europa.eu/collection/eupl/eupl-text-eupl-12
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//Jacoco
jacoco {
    toolVersion = "0.8.7"
}

def allTestCoverageFile = "${rootProject.buildDir}/jacoco/allTestCoverage.exec"
task jacocoMerge(type: JacocoMerge, group: 'verification') {
    destinationFile = file(allTestCoverageFile)
    executionData = project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
}

//Sonarqube
sonarqube {
    properties {
        property "sonar.scm.provider", "git"
        property "sonar.jacoco.reportPaths", allTestCoverageFile
    }
}

configurations {
    testImplementation {
        // Globally exclude JUnit4, will not be on the testCompileClasspath thus
        exclude group: 'junit', module: 'junit'
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom "software.amazon.awssdk:bom:2.15.62"
            mavenBom "org.testcontainers:testcontainers-bom:1.15.1"
            mavenBom "com.fasterxml.jackson:jackson-bom:2.12.5"
            mavenBom "org.junit:junit-bom:5.7.2"
        }
    }

    bootJar.enabled = false

    sourceCompatibility = JavaVersion.VERSION_13
    targetCompatibility = JavaVersion.VERSION_13
    group = projectGroup
    version = projectVersion

    repositories {
        mavenCentral()
        mavenLocal()
    }

}

apply from: "gradle/deployment.gradle"

subprojects { subproject ->
    apply plugin: "idea"
    apply plugin: "java-library"
    apply plugin: "checkstyle"
    apply plugin: "jacoco"
    apply plugin: "kotlin"
    apply plugin: "kotlin-spring"
    apply plugin: "kotlin-jpa"
    apply plugin: "kotlin-allopen"
    apply plugin: "io.freefair.lombok"
    apply from: "$rootProject.projectDir/gradle/test.gradle"
    apply plugin: "com.avast.gradle.docker-compose"
    apply plugin: "maven-publish"

    task allDeps(type: DependencyReportTask) {}

    task sourceJar(type: Jar) {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        from sourceSets.main.allSource
        classifier "sources"
    }

    task javadocJar(type: Jar) {
        from dokkaJavadoc
        classifier "javadoc"
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_13
        }
    }

    checkstyle {
        config project.resources.text.fromUri("${ritenseCheckStyleLocation}")
        ignoreFailures = false
        showViolations = true
    }

    tasks.withType(Checkstyle) {
        reports {
            html.destination rootProject.file("build/reports/${subproject.project.name}-checkstyle.html")
        }
    }

    sonarqube {
        properties {
            property "sonar.jacoco.reportPaths", allTestCoverageFile
        }
    }

    test.finalizedBy(jacocoMerge)

    configurations.all{
        resolutionStrategy {
            eachDependency { details ->
                if ('org.jacoco' == details.requested.group) {
                    details.useVersion "0.8.7"
                }
            }
        }
    }

    jar {
        enabled = true
        manifest {
            attributes(
                "Implementation-Title": projectName,
                "Implementation-Version": projectVersion
            )
        }
    }
}

tasks.withType(PublishToMavenRepository) {
    enabled = false
}
tasks.withType(PublishToMavenLocal) {
    enabled = false
}
