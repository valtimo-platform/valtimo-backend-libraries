/*
 * Copyright 2020 Dimpact.
 *
 * Licensed under EUPL, Version 1.2 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://joinup.ec.europa.eu/collection/eupl/eupl-text-eupl-12
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

projectVersion = 1.0

dockerCompose {
    projectName = "openzaak"
    isRequiredBy(integrationTesting)
    isRequiredBy(securityTesting)
    useComposeFiles.addAll("../docker-resources/docker-compose-base-test.yml", "docker-compose-override.yml")
}

dependencies {
    implementation project(':connector')
    implementation project(':contract')
    implementation project(':core')
    implementation project(':document')
    implementation project(':process-document')
    implementation project(':resource')

    compileOnly project(':plugin')
    compileOnly project(':zgw:zaken-api')
    compileOnly project(':zgw:documenten-api')
    compileOnly project(':zgw:catalogi-api')

    api "org.springframework.security:spring-security-core"
    api "org.springframework.boot:spring-boot"
    api "org.springframework.data:spring-data-commons"
    api "javax.inject:javax.inject:1"

    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-webflux"

    implementation "com.fasterxml.jackson.module:jackson-module-afterburner"
    implementation "com.fasterxml.jackson.module:jackson-module-parameter-names"
    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"

    implementation "io.github.microutils:kotlin-logging:2.0.4"

    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "org.springframework.boot:spring-boot-starter-test"

    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "com.vladmihalcea:hibernate-types-52:2.12.1"
    implementation "io.jsonwebtoken:jjwt-api:0.11.2"
    implementation "io.jsonwebtoken:jjwt-impl:0.11.2"
    implementation "io.jsonwebtoken:jjwt-jackson:0.11.2"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation "org.liquibase.ext:liquibase-hibernate5:4.8.0"

    annotationProcessor "org.springframework.boot:spring-boot-autoconfigure-processor"

    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.camunda.bpm.extension.mockito:camunda-bpm-mockito:4.13.0"

    //Kotlin
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation "org.mockito:mockito-inline"

    testImplementation project(':plugin')
    testImplementation project(':zgw:zaken-api')
    testImplementation project(':zgw:documenten-api')
    testImplementation project(':zgw:catalogi-api')
    testImplementation project(":test-utils-common")
    testImplementation project(":mail:local-mail")
    testImplementation project(":resource:local-resource")

    jar {
        enabled = true
        manifest {
            attributes("Implementation-Title": "Ritense OpenZaak spring boot starter")
            attributes("Implementation-Version": projectVersion)
        }
    }
}

apply from: "gradle/publishing.gradle"
