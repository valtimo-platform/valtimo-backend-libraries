/*
 * Copyright 2015-2024 Ritense BV, the Netherlands.
 *
 * Licensed under EUPL, Version 1.2 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://joinup.ec.europa.eu/collection/eupl/eupl-text-eupl-12
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

dockerCompose {
    projectName = "commandhandling"

    integrationTestingPostgresql {
        isRequiredBy(project.tasks.integrationTestingPostgresql)
        useComposeFiles.addAll("../docker-resources/docker-compose-base-test-postgresql.yml", "docker-compose-override-postgresql.yml")
    }

    integrationTestingMysql {
        isRequiredBy(project.tasks.integrationTestingMysql)
        useComposeFiles.addAll("../docker-resources/docker-compose-base-test-mysql.yml", "docker-compose-override-mysql.yml")
    }
}

dependencies {
    implementation project(":contract")
    implementation project(":core")
    implementation project(":authorization")
    implementation project(":form")
    implementation project(":process-link")
    implementation project(":web")

    api "org.springframework.security:spring-security-core"
    api "org.springframework.boot:spring-boot"
    api "org.springframework.data:spring-data-commons"
    api "jakarta.inject:jakarta.inject-api:${jakartaInjectVersion}"

    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-security"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"

    implementation "io.github.microutils:kotlin-logging:${kotlinLoggingVersion}"

    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "org.springframework.boot:spring-boot-starter-test"

    implementation "org.springframework.boot:spring-boot-autoconfigure"

    annotationProcessor "org.springframework.boot:spring-boot-autoconfigure-processor"

    testImplementation project(':test-utils-common')
    testImplementation project(":keycloak-iam")
    testImplementation project(":mail:local-mail")
    testImplementation project(":contract")
    testImplementation project(":core")
    testImplementation project(":test-utils-common")
    testImplementation "org.apache.httpcomponents.client5:httpclient5"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.mockito.kotlin:mockito-kotlin:${mockitoKotlinVersion}"

    jar {
        enabled = true
        manifest {
            attributes("Implementation-Title": "Ritense Form View Model spring boot starter")
            attributes("Implementation-Version": projectVersion)
        }
    }
}

apply from: "gradle/publishing.gradle"
