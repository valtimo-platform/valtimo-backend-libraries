/*
 * Copyright 2015-2023 Ritense BV, the Netherlands.
 *
 * Licensed under EUPL, Version 1.2 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://joinup.ec.europa.eu/collection/eupl/eupl-text-eupl-12
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

dockerCompose {
    projectName = "smartdocuments"
    isRequiredBy(integrationTesting)
    isRequiredBy(securityTesting)
    useComposeFiles.addAll("../../docker-resources/docker-compose-base-test.yml", "docker-compose-override.yml")
}

dependencies {
    implementation project(":connector")
    implementation project(':contract')
    implementation project(':core')
    implementation project(':document')
    implementation project(":document-generation")
    implementation project(':process-document')
    implementation project(':resource')
    implementation project(':resource:temporary-resource-storage')
    implementation project(':value-resolver')

    api project(':document-generation')

    compileOnly project(':plugin')

    api "org.springframework.security:spring-security-core"
    api "org.springframework.boot:spring-boot"
    api "org.springframework.data:spring-data-commons"
    api "javax.inject:javax.inject:${javaxInjectVersion}"

    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-validation"

    implementation "com.fasterxml.jackson.module:jackson-module-blackbird"
    implementation "com.fasterxml.jackson.module:jackson-module-parameter-names"
    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml")

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"

    implementation "org.apache.commons:commons-text:${commonsText}"
    implementation "io.github.microutils:kotlin-logging:${kotlinLoggingVersion}"

    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "org.springframework.boot:spring-boot-starter-test"

    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.springframework.boot:spring-boot-starter-webflux"
    implementation "commons-io:commons-io:${commonsIoVersion}"

    testImplementation "org.springframework.security:spring-security-test"
    testImplementation("org.camunda.bpm.extension.mockito:camunda-bpm-mockito:5.16.0")
    testImplementation("org.camunda.bpm.assert:camunda-bpm-assert:15.0.0")
    testImplementation "com.squareup.okhttp3:mockwebserver:${okhttpVersion}"
    testImplementation "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    testImplementation "org.mockito.kotlin:mockito-kotlin:${mockitoKotlinVersion}"
    testImplementation project(':test-utils-common')
    testImplementation project(':plugin-valtimo')
}

apply from: "gradle/publishing.gradle"
